from datetime import datetime
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from app.models.produto import Produto
from app.models.categoria import Categoria
from app.models.usuario import Usuario
from app.models.movimentacao import Movimentacao
from app.database import Database

def testar_conexao():
    db = Database()
    if db.conectar():
        print("Conex√£o bem-sucedida!")
        return True
    print("Falha na conex√£o")
    return False

def cadastrar_categoria():
    print("\nCadastro de Categoria")
    nome = input("Nome da Categoria: ")
    descricao = input("Descri√ß√£o: ")
    
    categoria = Categoria(nome, descricao)
    if categoria_id := categoria.salvar():
        print(f"Categoria cadastrada com ID: {categoria_id}")
    else:
        print("Falha ao cadastrar categoria")

def listar_categorias():
    print("\nLista de Categorias")
    if categorias := Categoria.listar_todas():
        for cat in categorias:
            print(f"\nID: {cat['id_categoria']}")
            print(f"Nome: {cat['nome']}")
            print(f"Descri√ß√£o: {cat['descricao']}")
    else:
        print("Nenhuma categoria cadastrada")

def cadastrar_produto():
    print("\n=== üî∏  CADASTRO DE PRODUTO  üî∏ ===")
    listar_categorias()  
    print("=======================================================")
    print("üìå Escolha uma categoria acima para cadastrar o produto")
    print("=======================================================")
    
    try:
        dados = {
            'categorias_id_categoria': int(input("ID da Categoria: ")),
            'nome': input("Nome do produto: ").strip(),
            'descricao': input("Descri√ß√£o do produto: ").strip(),
            'quantidade': max(0, int(input("Quantidade Inicial: "))),
            'valor_unitario': max(0.0, float(input("Valor Unit√°rio (R$): ")))
        }
        
        produto = Produto(**dados)
        if produto_id := produto.salvar():
            print("\n=======================================")
            print(" üî∏  PRODUTO CADASTRADO COM SUCESSO! üî∏  ")
            print("=======================================")
            print(f"ID: {produto_id}")
            print(f"Nome: {dados['nome']}")
            print(f"Categoria ID: {dados['categorias_id_categoria']}")
            print(f"Estoque: {dados['quantidade']}")
            print(f"Valor Unit√°rio: R$ {dados['valor_unitario']:.2f}")
            print("=======================================")
        else:
            print("\n Falha ao cadastrar produto. Verifique os dados e tente novamente.")
    except ValueError as e:
        print(f"\n Erro: {str(e)}")
        print("Certifique-se de que:")
        print("- ID da Categoria √© um n√∫mero v√°lido")
        print("- Quantidade √© um n√∫mero inteiro positivo")
        print("- Valor Unit√°rio √© um n√∫mero decimal v√°lido")

def listar_produtos():
    print("\n=== üî∏  LISTA DE PRODUTOS  üî∏ ===")
    if produtos := Produto.listar_todos():
        for p in produtos:
            print(f"""
ID: {p['id_produto']}
Nome: {p['nome']}
Descri√ß√£o: {p['descricao']}
Categoria: {p['categoria_nome']} (ID: {p['categorias_id_categoria']})
Estoque: {p['quantidade']}
Valor Unit√°rio: R$ {float(p.get('valor_unitario', 0)):.2f}
Data Cadastro: {p.get('data_cadastro', '').strftime('%d/%m/%Y %H:%M') if p.get('data_cadastro') else 'N/A'}
---------------------------------------""")
        input("\nPressione Enter para voltar...")
    else:
        print("\nNenhum produto cadastrado no sistema")
        input("Pressione Enter para voltar...")

def cadastrar_usuario():
    print("\n=== CADASTRO DE USU√ÅRIO ===")
    
    try:
        dados = {
            'nome': input("Nome: "),
            'email': input("Email: "),
            'senha': input("Senha: "),
            'status': 'S'
        }
     
        niveis = {
            '1': 'administrador',
            '2': 'gerente',
            '3': 'biomedico',
            '4': 'esteticista',
            '5': 'recepcionista'
        }
        
        print("\nN√≠veis de acesso dispon√≠veis:")
        for k, v in niveis.items():
            print(f"{k} - {v.capitalize()}")
        print("========================")
        
        while True:
            opcao = input("Escolha o n√≠vel de acesso: ")
            if opcao in niveis:
                dados['nivel_de_acesso'] = niveis[opcao]
                break
            else:
                print("Op√ß√£o inv√°lida! Digite um n√∫mero entre 1 e 5.")
        
        usuario = Usuario(**dados)
        if usuario_id := usuario.salvar():
            print("\n====================================")
            print("‚úÖ USU√ÅRIO CADASTRADO COM SUCESSO!")
            print("====================================")
            print(f"ID: {usuario_id}")
            print(f"Nome: {dados['nome']}")
            print(f"Email: {dados['email']}")
            print(f"N√≠vel de acesso: {dados['nivel_de_acesso'].capitalize()}")
            print("====================================")
        else:
            print(" Falha ao cadastrar usu√°rio")
            
    except Exception as e:
        print(f"\n Erro: {str(e)}")

def listar_usuarios():
    print("\n=== LISTA DE USU√ÅRIOS ===")
    if usuarios := Usuario.listar_todos():
        for u in usuarios:
            print(f"""
ID: {u['id_usuario']}
Nome: {u['nome']}
Email: {u['email']}
N√≠vel de Acesso: {u['nivel_de_acesso'].capitalize()}
---------------------------------------""")
        input("\nPressione Enter para voltar...")
    else:
        print("Nenhum usu√°rio cadastrado")
        input("Pressione Enter para voltar...")
        

def registrar_movimentacao(tipo: str):
    tipo_nome = "ENTRADA" if tipo == "entrada" else "SA√çDA"
    
    while True:  
        print("\n" + "="*50)
        print(f"üìù REGISTRAR {tipo_nome} DE ESTOQUE".center(50))
        print("="*50)
        
       
        print("\nüì¶ LISTA DE PRODUTOS DISPON√çVEIS:")
        produtos = Produto.listar_todos()
        if not produtos:
            print(" Nenhum produto cadastrado!")
            input("\nPressione Enter para voltar...")
            return
            
        for prod in produtos:
            print(f"\nID: {prod['id_produto']}")
            print(f"Nome: {prod['nome']}")
            print(f"Estoque: {prod['quantidade']}")
            print(f"Categoria: {prod.get('categoria_nome', 'N/A')}")
            print("-"*40)
        
        try:
            id_produto = int(input("\n‚ñ∂ ID do Produto (0 para cancelar): "))
            if id_produto == 0:
                return
                
            produto = Produto.obter_por_id(id_produto)
            if not produto:
                print(" Produto n√£o encontrado!")
                continue
                
            print("\n" + "="*50)
            print(f"üîç PRODUTO SELECIONADO:")
            print(f"‚ñ™ Nome: {produto['nome']}")
            print(f"‚ñ™ Estoque Atual: {produto['quantidade']}")
            print(f"‚ñ™ Categoria: {produto.get('categoria_nome', 'N/A')}")
            print("="*50)
            
            while True:
                try:
                    quantidade = int(input("\n‚ñ∂ Quantidade: "))
                    if quantidade <= 0:
                        print("‚ö†Ô∏è A quantidade deve ser maior que zero!")
                        continue
                        
                    if tipo == 'saida' and produto['quantidade'] < quantidade:
                        print(f" Estoque insuficiente! Dispon√≠vel: {produto['quantidade']}")
                        continue
                    break
                except ValueError:
                    print("‚ö†Ô∏è Digite um n√∫mero v√°lido!")
            
            if tipo == 'saida':
                print("\n" + "="*50)
                print(f"‚ö†Ô∏è CONFIRMA√á√ÉO DE SA√çDA")
                print(f"‚ñ™ Produto: {produto['nome']}")
                print(f"‚ñ™ Quantidade: {quantidade}")
                print(f"‚ñ™ Estoque ap√≥s sa√≠da: {produto['quantidade'] - quantidade}")
                print("="*50)
                
                confirmacao = input("\n‚ñ∂ Confirmar sa√≠da? (S/N): ").strip().upper()
                if confirmacao != 'S':
                    print("Opera√ß√£o cancelada!")
                    continue
            
            print("\n" + "="*50)
            print("üë§ SELECIONE O USU√ÅRIO RESPONS√ÅVEL:")
            usuarios = Usuario.listar_todos()
            if not usuarios:
                print(" Nenhum usu√°rio cadastrado!")
                input("\nPressione Enter para voltar...")
                return
                
            for user in usuarios:
                print(f"\nID: {user['id_usuario']}")
                print(f"Nome: {user['nome']}")
                print(f"N√≠vel: {user['nivel_de_acesso'].capitalize()}")
                print("-"*40)
            
            while True:
                try:
                    id_usuario = int(input("\n‚ñ∂ ID do Respons√°vel: "))
                    usuario = next((u for u in usuarios if u['id_usuario'] == id_usuario), None)
                    if usuario:
                        break
                    print(" Usu√°rio n√£o encontrado!")
                except ValueError:
                    print(" Digite um n√∫mero v√°lido!")
            
            motivo = input("\n‚ñ∂ Motivo: ").strip()
            
            
            print("\n" + "="*50)
            print(" RESUMO DA MOVIMENTA√á√ÉO")
            print(f"‚ñ™ Tipo: {tipo_nome}")
            print(f"‚ñ™ Produto: {produto['nome']} (ID: {id_produto})")
            print(f"‚ñ™ Quantidade: {quantidade}")
            print(f"‚ñ™ Respons√°vel: {usuario['nome']} (ID: {id_usuario})")
            print(f"‚ñ™ Motivo: {motivo}")
            print("="*50)
            
            confirmacao_final = input("\n‚ñ∂ Confirmar registro? (S/N): ").strip().upper()
            if confirmacao_final != 'S':
                print("Opera√ß√£o cancelada!")
                continue
            
           
            mov = Movimentacao(
                tipo=tipo,
                quantidade=quantidade,
                motivo=motivo,
                id_usuario=id_usuario,
                id_produto=id_produto
            )
            
            if id_movimentacao := mov.salvar():
                produto_atualizado = Produto.obter_por_id(id_produto)
                
                print("\n" + "="*50)
                print(f"‚úÖ {tipo_nome} REGISTRADA COM SUCESSO!")
                print("="*50)
                print(f"‚ñ™ ID Movimenta√ß√£o: {id_movimentacao}")
                print(f"‚ñ™ Produto: {produto['nome']}")
                print(f"‚ñ™ Quantidade: {quantidade}")
                print(f"‚ñ™ Estoque Atualizado: {produto_atualizado['quantidade']}")
                print(f"‚ñ™ Respons√°vel: {usuario['nome']}")
                print(f"‚ñ™ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                print("="*50)
                
                
                if input("\n‚ñ∂ Registrar outra movimenta√ß√£o? (S/N): ").strip().upper() != 'S':
                    break
            else:
                print(" Falha ao registrar movimenta√ß√£o!")
                
        except Exception as e:
            print(f" Erro inesperado: {str(e)}")
            continue
        
    input("\nPressione Enter para voltar ao menu...")




def listar_movimentacoes():
    while True:  
        print("\n" + "="*50)
        print(" HIST√ìRICO DE MOVIMENTA√á√ïES".center(50))
        print("="*50)
        print("\nOp√ß√µes de filtro:")
        print("1. Listar todas as movimenta√ß√µes")
        print("2. Listar por produto espec√≠fico")
        print("3. Voltar ao menu anterior")
        
        opcao = input("\nOp√ß√£o: ").strip()
        
        if opcao == "1":
            movimentacoes = Movimentacao.listar_todas()
            titulo = "TODAS AS MOVIMENTA√á√ïES"
        elif opcao == "2":
            listar_produtos()
            id_produto = input("\nID do Produto (ou deixe em branco para voltar): ").strip()
            if not id_produto:
                continue
            try:
                movimentacoes = Movimentacao.listar_por_produto(int(id_produto))
                produto = Produto.obter_por_id(int(id_produto))
                titulo = f"MOVIMENTA√á√ïES DO PRODUTO: {produto['nome']}" if produto else "MOVIMENTA√á√ïES DO PRODUTO"
            except ValueError:
                print(" ID deve ser um n√∫mero inteiro!")
                continue
        elif opcao == "3":
            return
        else:
            print(" Op√ß√£o inv√°lida!")
            continue
        
        if movimentacoes:
            print("\n" + "="*50)
            print(f" {titulo}".center(50))
            print("="*50)
            
          
            print(f"\n{'ID':<5} {'Data/Hora':<16} {'Tipo':<8} {'Produto':<20} {'Qtd':<6} {'Respons√°vel':<20} {'Motivo'}")
            print("-"*90)
            
            for mov in movimentacoes:
                print(f"{mov['id_movimentacao']:<5} "
                      f"{mov['data_movimentacao'].strftime('%d/%m/%Y %H:%M'):<16} "
                      f"{'‚ñ≤' if mov['tipo'] == 'entrada' else '‚ñº':<8} "
                      f"{mov['produto_nome'][:18]:<20} "
                      f"{mov['quantidade']:<6} "
                      f"{mov['usuario_nome'][:18]:<20} "
                      f"{mov['motivo'][:20]}")
            
       
            entradas = sum(m['quantidade'] for m in movimentacoes if m['tipo'] == 'entrada')
            saidas = sum(m['quantidade'] for m in movimentacoes if m['tipo'] == 'saida')
            
            print("\n" + "="*50)
            print(f"üìå RESUMO ESTAT√çSTICO".center(50))
            print(f"Total de entradas: {entradas} unidades")
            print(f"Total de sa√≠das: {saidas} unidades")
            print(f"Saldo: {entradas - saidas} unidades")
            print("="*50)
        else:
            print("\n Nenhuma movimenta√ß√£o encontrada com os filtros selecionados")
        
        input("\nPressione Enter para continuar...")
        

def ajustar_estoque():
    print("\n=== AJUSTE DE ESTOQUE ===")
    listar_produtos()
    
    try:
      
        id_produto = int(input("\nID do Produto: "))
        produto = Produto.obter_por_id(id_produto)
        if not produto:
            print("Produto n√£o encontrado!")
            return
            
        print(f"\nüîé Produto Selecionado: {produto['nome']}")
        print(f"   Estoque Atual: {produto['quantidade']}")
        
        
        nova_quantidade = int(input("Nova quantidade em estoque: "))
        motivo = input("Motivo do ajuste: ")
        
     
        print("\n=== USU√ÅRIOS DISPON√çVEIS ===")
        usuarios = Usuario.listar_todos()
        if not usuarios:
            print(" Nenhum usu√°rio cadastrado!")
            return
            
        for user in usuarios:
            print(f"ID: {user['id_usuario']} | Nome: {user['nome']} | N√≠vel: {user['nivel_de_acesso']}")
        
        id_usuario = int(input("\nID do Usu√°rio Respons√°vel: "))
        
        
        usuario_responsavel = next((u for u in usuarios if u['id_usuario'] == id_usuario), None)
        if not usuario_responsavel:
            print(" Usu√°rio n√£o encontrado!")
            return
        
        diferenca = nova_quantidade - produto['quantidade']
        
        if diferenca == 0:
            print("Quantidade n√£o alterada")
            return
            
        tipo = 'entrada' if diferenca > 0 else 'saida'
        quantidade_ajuste = abs(diferenca)
        
       
        print(f"\n CONFIRMAR AJUSTE:")
        print(f"Produto: {produto['nome']} (ID: {id_produto})")
        print(f"Tipo: {'Entrada' if tipo == 'entrada' else 'Sa√≠da'}")
        print(f"Quantidade: {quantidade_ajuste}")
        print(f"Estoque anterior: {produto['quantidade']}")
        print(f"Novo estoque: {nova_quantidade}")
        print(f"Respons√°vel: {usuario_responsavel['nome']} (ID: {id_usuario})")
        print(f"Motivo: {motivo}")
        
        confirmacao = input("\nConfirmar ajuste? (S/N): ").strip().upper()
        if confirmacao != 'S':
            print("Opera√ß√£o cancelada!")
            return
        
        
        mov = Movimentacao(
            tipo=tipo,
            quantidade=quantidade_ajuste,
            motivo=motivo,
            id_usuario=id_usuario,
            id_produto=id_produto
        )
        
        if id_movimentacao := mov.salvar():
            produto_atualizado = Produto.obter_por_id(id_produto)
            
            print("\n" + "="*50)
            print("‚úÖ AJUSTE DE ESTOQUE REGISTRADO COM SUCESSO")
            print("="*50)
            print(f"‚ñ™ ID Movimenta√ß√£o: {id_movimentacao}")
            print(f"‚ñ™ Produto: {produto['nome']} (ID: {id_produto})")
            print(f"‚ñ™ Tipo: {'Entrada' if tipo == 'entrada' else 'Sa√≠da'}")
            print(f"‚ñ™ Quantidade Ajustada: {quantidade_ajuste}")
            print(f"‚ñ™ Estoque Anterior: {produto['quantidade']}")
            print(f"‚ñ™ Novo Estoque: {produto_atualizado['quantidade']}")
            print(f"‚ñ™ Respons√°vel: {usuario_responsavel['nome']} (ID: {id_usuario})")
            print(f"‚ñ™ Motivo: {motivo}")
            print(f"‚ñ™ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
            print("="*50)
        else:
            print(" Falha ao registrar ajuste de estoque!")
            
    except ValueError:
        print(" Erro: Valor inv√°lido! Certifique-se de digitar n√∫meros para ID e quantidade.")
    except Exception as e:
        print(f" Erro inesperado: {str(e)}")
    finally:
        input("\nPressione Enter para continuar...")
        

def menu_produtos():
    while True:
        print("\nüî∏ MENU PRODUTOS üî∏")
        print("1. Cadastrar produto")
        print("2. Listar produtos")
        print("3. Registrar entrada de estoque")
        print("4. Registrar sa√≠da de estoque")
        print("5. Ajustar estoque manualmente")
        print("6. Hist√≥rico de movimenta√ß√µes")
        print("7. Voltar")
        
        opcao = input("Op√ß√£o: ")
        
        if opcao == "1":
            cadastrar_produto()
        elif opcao == "2":
            listar_produtos()
        elif opcao == "3":
            registrar_movimentacao('entrada')
        elif opcao == "4":
            registrar_movimentacao('saida')
        elif opcao == "5":
            ajustar_estoque()
        elif opcao == "6":
            listar_movimentacoes()
        elif opcao == "7":
            break
        else:
            print(" Op√ß√£o inv√°lida!")

def menu_categorias():
    while True:
        print("\nüî∏ MENU CATEGORIAS üî∏")
        print("1. Cadastrar categoria")
        print("2. Listar categorias")
        print("3. Voltar")
        
        opcao = input("Op√ß√£o: ")
        
        if opcao == "1":
            cadastrar_categoria()
        elif opcao == "2":
            listar_categorias()
        elif opcao == "3":
            break
        else:
            print(" Op√ß√£o inv√°lida!")
            

def menu_usuarios():
    while True:
        print("\nüî∏ MENU USU√ÅRIOS üî∏")
        print("1. Cadastrar usu√°rio")
        print("2. Listar usu√°rios")
        print("3. Voltar")
        
        opcao = input("Op√ß√£o: ")
        
        if opcao == "1":
            cadastrar_usuario()
        elif opcao == "2":
            listar_usuarios()
        elif opcao == "3":
            break
        else:
            print(" Op√ß√£o inv√°lida!")

def menu_movimentacoes():
    while True:
        print("\nüî∏ MENU MOVIMENTA√á√ïES üî∏")
        print("1. Registrar entrada de estoque")
        print("2. Registrar sa√≠da de estoque")
        print("3. Ajustar estoque manualmente")
        print("4. Hist√≥rico completo")
        print("5. Hist√≥rico por produto")
        print("6. Voltar")
        
        opcao = input("Op√ß√£o: ")
        
        if opcao == "1":
            registrar_movimentacao('entrada')
        elif opcao == "2":
            registrar_movimentacao('saida')
        elif opcao == "3":
            ajustar_estoque()
        elif opcao == "4":
            listar_movimentacoes()
        elif opcao == "5":
            listar_produtos()
            id_produto = input("\nID do Produto (ou deixe em branco para cancelar): ")
            if id_produto:
                movimentacoes = Movimentacao.listar_por_produto(int(id_produto))
                if movimentacoes:
                    print("\n=== MOVIMENTA√á√ïES DO PRODUTO ===")
                    for mov in movimentacoes:
                        print(f"\nData: {mov['data_movimentacao'].strftime('%d/%m/%Y %H:%M')}")
                        print(f"Tipo: {'Entrada' if mov['tipo'] == 'entrada' else 'Sa√≠da'}")
                        print(f"Quantidade: {mov['quantidade']}")
                        print(f"Motivo: {mov['motivo']}")
                        print(f"Registrado por: {mov['usuario_nome']}")
                else:
                    print("Nenhuma movimenta√ß√£o encontrada para este produto")
        elif opcao == "6":
            break
        else:
            print(" Op√ß√£o inv√°lida!")

def menu_principal():
    while True:
        print("\nüî∏ MENU PRINCIPAL üî∏ ")
        print("1. Gerenciar Produtos")
        print("2. Gerenciar Categorias")
        print("3. Gerenciar Usu√°rios")
        print("4. Gerenciar Movimenta√ß√µes")
        print("5. Sair")
        
        opcao = input("Op√ß√£o: ")
        
        if opcao == "1":
            menu_produtos()
        elif opcao == "2":
            menu_categorias()
        elif opcao == "3":
            menu_usuarios()
        elif opcao == "4":
            menu_movimentacoes()
        elif opcao == "5":
            print("Saindo do sistema...")
            break
        else:
            print(" Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    if testar_conexao():
        menu_principal()